#!/usr/bin/perl -w

use strict;
use NethServer::BackupConfig;
use esmith::ConfigDB;
use vars qw();
use File::Basename;
use File::Copy;
use Time::localtime;

sub timestamp {
    my $t = localtime();
    return sprintf( "%04d-%02d-%02d_%02d-%02d-%02d",
        $t->year + 1900, $t->mon + 1, $t->mday,
        $t->hour, $t->min, $t->sec );
}

sub bkp_cfg_db_settings {
    my $db = esmith::ConfigDB->open_ro() or die "Couldn't open ConfigDB\n";
    return $db->get_prop('backup-config', 'keep_backups') || '30';
}

my $keep = bkp_cfg_db_settings();
#if the value to keep the backups is 0 (keep all) then we exit
if ($keep == 0) {
    exit 0;
}

# define the backup folder
my $bkp_dir = dirname(NethServer::BackupConfig::DESTINATION);

my $history_destination = $bkp_dir . '/backup-config_' . timestamp() . '.tar.xz';
copy(NethServer::BackupConfig::DESTINATION, $history_destination) || warn "[WARNING] copy to $history_destination failed!";
copy(NethServer::BackupConfig::DESTINATION . '.md5', $history_destination . '.md5') || warn "[WARNING] copy to $history_destination.md5 failed!";
copy(NethServer::BackupConfig::DESTINATION . '-content.md5', $history_destination . '-content.md5') || warn "[WARNING] copy to $history_destination-content.md5 failed!";
chmod 0644, $history_destination;

#open the backups folder for processing
opendir (DIR, $bkp_dir) or die "Error opening '$bkp_dir': '$!' \n";

my @bkp_files = grep /^backup-config_.*\.tar\.xz$/, readdir (DIR);

#check that the filename array contains something (at least 1 file found)
if (! @bkp_files) {
    # if it does not contain a filename; exit
    exit 0;
} 
# if we have something in the bkp_files array we do a sort so we will get the newest files first
my @bkp_files_sorted= reverse sort @bkp_files;

# we check that the array contains more than max defined in $keep elements
if (@bkp_files_sorted <= $keep ) {
    # the array contains less than $keep elements, so no rotation needed; exit
    exit 0;
}

# if it is greater than $keep, put the extra elements in a separate array
my @slice = @bkp_files_sorted[$keep .. $#bkp_files_sorted];

# then delete elements from the array index $keep -> end of array
foreach my $file_extra (@slice) {
    # remove the backup file and the md5 files
    if ( ! -f $bkp_dir . '/' .$file_extra ) {
        print $file_extra." configuration backup file not found! \n";
    } else {
        unlink "/var/lib/nethserver/backup/".$file_extra or warn "Error removing ".$file_extra;
        unlink "/var/lib/nethserver/backup/".$file_extra.".md5" or warn "Error removing ".$file_extra.".md5";
        unlink "/var/lib/nethserver/backup/".$file_extra."-content.md5" or warn "Error removing ".$file_extra."-content.md5";
    };
}
